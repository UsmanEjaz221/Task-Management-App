@* @page "/" *@
@* @using Blazored.LocalStorage; *@
@* @inject AppState appState; *@


@* @using TaskManager.Data *@

@* <PageTitle>Task Manager</PageTitle> *@

@* <h1>Home Page</h1> *@

@page "/"

<h3>Welcome To Dashboard</h3>
<div class="d-flex flex-wrap justify-content-center">
	<TaskSummaryCard Title="Total Tasks"
					 Count="100"
					 Description="All tasks assigned"
					 CardHeaderColor="#6a67ce" />

	<TaskSummaryCard Title="Completed Tasks"
					 Count="40"
					 Description="Tasks completed successfully"
					 CardHeaderColor="#28a745" />

	<TaskSummaryCard Title="Remaining Tasks"
					 Count="60"
					 Description="Tasks yet to be completed"
					 CardHeaderColor="#dc3545" />
</div>
<!-- Card Component -->

<div class="d-flex ">
	<CardWithCanvas TotalTasks="30" CompletedTasks="10" />
	<AddTask CardHeaderColor="#6c757d" />
	@* <Calander CardHeaderColor="#ff8c00" /> *@
</div>

@code {
	/*private string Task;
	private bool isComplete


	private List<taskClass> Tasks = new List<taskClass>();		list of objects
	private taskClass newTask = new taskClass();

	public void saveTask()
	{
		Console.WriteLine($"Saved ! {Task}");
		if(Task == "")
		{
			return;
		}
		taskClass newTask = new taskClass();
		newTask.AddTask(Task);
		Task = "";
		Tasks.Add(newTask);
		appState.SaveTaskLocally(); Persist changes
	}


	public void taskDone(taskClass task)
	{
		task.IsComplete = !task.IsComplete;
		appState.SaveTaskLocally(); Persist changes
	}
	public void taskEdit(taskClass task)
	{
		Task = task.getTask();
		Tasks.Remove(task);
		SaveTaskLocally(); // Persist changes
	}
	public void taskRemove(taskClass task)
	{
		Tasks.Remove(task);
		appState.SaveTaskLocally(); Persist changes
	}

	*/
}